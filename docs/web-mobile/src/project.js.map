{"version":3,"sources":["assets/script/GLOBAL.js","assets/script/edge.js","assets/script/gameOver.js","assets/script/game.js","assets/script/platform.js","assets/script/player.js","assets/script/start.js"],"names":["window","GLOBAL_DATA","game","setTimeout","console","log","cc","director","getPhysicsManager","enabled","Class","extends","Component","properties","start","btnRestart","default","type","Node","this","on","loadScene","Player","require","platformPrefab","Prefab","enemyPrefab","player","healthProgress","platformPoolLayer","onLoad","platformPool","NodePool","node","spawnNewPlayer","id","newEnemy","instantiate","name","addChild","setPosition","getNewPlatformPosition","spawnNewPlatform","data","newPlatform","size","get","p","x","y","randomMinus1To1","enemyMove","enemy","getChildByName","rotation","speedX","speedY","velocity","getComponent","linearVelocity","angularVelocity","ySpeed","serializable","reuse","update","dt","rigidbody","lostHealth","setInputControler","a","density","apply","enabledContactListener","getMass","systemEvent","SystemEvent","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","event","keyCode","macro","KEY","left","applyForceToCenter","d","right","_node","_node2","progress","dispatchEvent","Event","EventCustom","emitDead","onBeginContact","contact","self","other","group","onEndContact","inputName","btnStart","_this","string","setInterval","spawnPlatformPosition","canvasStatus","Math","random"],"mappings":"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","sourcesContent":["window.GLOBAL_DATA = {\n    game: null,\n};\n\n// 启用碰撞\n// var manager = cc.director.getCollisionManager();\n// manager.enabled = true;\n// manager.enabledDebugDraw = true;\n\n// 物理引擎\nsetTimeout(() => {\n\n    console.log(cc.director);\n    console.log(cc.director.getPhysicsManager());\n    cc.director.getPhysicsManager().enabled = true;\n    // cc.director.getPhysicsManager().debugDrawFlags = 0;\n\n}, 1000);\n\n// cc.director.getPhysicsManager().debugDrawFlags = cc.PhysicsManager.DrawBits.e_aabbBit\n// 设置重力\n// cc.director.getPhysicsManager().gravity = cc.v2();","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n        // rigidbody = this.getComponent('cc.RigidBody')\n\n    },\n\n    // update (dt) {},\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        btnRestart: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start() {\n        this.btnRestart.on('touchstart', () => {\n            cc.director.loadScene('game')\n        })\n    }\n\n    // update (dt) {},\n})\n","const Player = require('player')\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        platformPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        enemyPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        player: {\n            default: null,\n            type: Player\n        },\n        healthProgress: {\n            default: null,\n            type: cc.Node\n        },\n        platformPoolLayer: {\n            default: null,\n            type: cc.Node\n        }\n    },\n\n    onLoad() {\n        GLOBAL_DATA.game = this\n        this.platformPool = new cc.NodePool('platform')\n\n        this.node.on('die', () => {\n            cc.director.loadScene('gameOver')\n        })\n\n    },\n    spawnNewPlayer(id, player) {\n        let newEnemy = cc.instantiate(this.enemyPrefab)\n        newEnemy.name = id\n        this.node.addChild(newEnemy)\n        newEnemy.setPosition(this.getNewPlatformPosition())\n    },\n    spawnNewPlatform(data) {\n        var newPlatform = null\n        // 使用给定的模板在场景中生成一个新节点\n        if (this.platformPool.size() > 0) {\n            newPlatform = this.platformPool.get(this) // this will be passed to Star's reuse method\n        } else {\n            newPlatform = cc.instantiate(this.platformPrefab)\n        }\n        // 将新增的节点添加到 Canvas 节点下面\n        this.platformPoolLayer.addChild(newPlatform)\n        newPlatform.setPosition(cc.p(data.x, data.y))\n    },\n    getNewPlatformPosition() {\n        let y = -667\n        let x = this.node.x / 2 * cc.randomMinus1To1()\n        return cc.p(x, y)\n    },\n    start() {\n    },\n\n    enemyMove(data) {\n        const id = data.id\n        let enemy = this.node.getChildByName(id)\n        // console.group()\n        // console.log(this)\n        // console.log(enemy)\n        // console.groupEnd()\n\n        const {x, y, rotation, speedX, speedY, velocity} = data\n        enemy.x = x\n        enemy.y = y\n        enemy.rotation = rotation\n        enemy.getComponent('cc.RigidBody').linearVelocity = cc.p(speedX, speedY)\n        enemy.getComponent('cc.RigidBody').angularVelocity = velocity\n\n    }\n    // update (dt) {},\n})\n","const Player = require('player')\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        ySpeed: 100,\n        game: {\n            default: null,\n            serializable: false\n        },\n        player: {\n            default: null,\n            type: Player\n        }\n    },\n\n    // onLoad () {},\n\n    reuse() {\n        console.log('reuse')\n    },\n    start() {\n        this.player = GLOBAL_DATA.game.player\n        let rigidbody = this.getComponent('cc.RigidBody')\n        rigidbody.linearVelocity = cc.p(0, 100)\n    },\n\n    update(dt) {\n        // let y = this.node.y\n        // let top = GLOBAL_DATA.game.node.height / 2\n        // if (y > top) {\n        //     GLOBAL_DATA.game.platformPool.put(this.node)\n        //     let time = cc.random0To1() * 2000\n        //     setTimeout(() => {\n        //         GLOBAL_DATA.game.spawnNewPlatform()\n        //     }, time)\n        //\n        // }\n    },\n})\n","let rigidbody = null;\n// const {emitKeyboardEvent, emitDead} = require('connect');\ncc.Class({\n    extends: cc.Component,\n    properties: {\n        lostHealth: 0,\n    },\n\n    // onLoad () {},\n\n    start() {\n        this.setInputControler();\n\n        let a = this.getComponent('cc.PhysicsBoxCollider');\n        a.density = 1;\n        a.apply();\n        rigidbody = this.getComponent('cc.RigidBody');\n        rigidbody.enabledContactListener = true;\n\n        var mass = rigidbody.getMass();\n    },\n    setInputControler() {\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n    onKeyDown(event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                rigidbody.applyForceToCenter(cc.p(-30000, 0));\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                rigidbody.applyForceToCenter(cc.p(30000, 0));\n\n                break;\n        }\n        const {x, y, rotation} = this.node;\n        rigidbody = this.getComponent('cc.RigidBody');\n        let speed = rigidbody.linearVelocity;\n        let velocity = rigidbody.angularVelocity;\n        // emitKeyboardEvent({\n        //     x, y, rotation,\n        //     speedX: speed.x,\n        //     speedY: speed.y,\n        //     velocity,\n        // });\n    },\n    onKeyUp(event) {\n        switch (event.keyCode) {\n            case cc.macro.KEY.a:\n            case cc.macro.KEY.left:\n                rigidbody.applyForceToCenter(cc.p(0, 0));\n                break;\n            case cc.macro.KEY.d:\n            case cc.macro.KEY.right:\n                rigidbody.applyForceToCenter(cc.p(0, 0));\n\n                break;\n        }\n        const {x, y, rotation} = this.node;\n        rigidbody = this.getComponent('cc.RigidBody');\n        let speed = rigidbody.linearVelocity;\n        let velocity = rigidbody.angularVelocity;\n        // emitKeyboardEvent({\n        //     x, y, rotation,\n        //     speedX: speed.x,\n        //     speedY: speed.y,\n        //     velocity,\n        // });\n    },\n    update(dt) {\n        // if (this.movingLeft) {\n        //     this.node.x -= this.xSpeed * dt\n        // } else if (this.movingRight) {\n        //     this.node.x += this.xSpeed * dt\n        // }\n        // let rigidbody = this.getComponent('cc.RigidBody')\n        //\n        // var mass = rigidbody.getMass()\n        // console.log(mass)\n\n        // if (!this.isInPlatform) {\n        //     this.ySpeed += this.g * dt\n        //     this.node.y -= this.ySpeed * dt\n        // } else {\n        //     this.node.y = this.withPlatform.node.y\n        // }\n\n        let progress = GLOBAL_DATA.game.healthProgress.getComponent('cc.ProgressBar').progress;\n        if (this.lostHealth !== 0) {\n            if (progress <= 0) {\n                GLOBAL_DATA.game.healthProgress.getComponent('cc.ProgressBar').progress = 0;\n                this.node.dispatchEvent(new cc.Event.EventCustom('die', true));\n                emitDead();\n            } else {\n                GLOBAL_DATA.game.healthProgress.getComponent('cc.ProgressBar').progress -= this.lostHealth * 0.01;\n            }\n\n        } else {\n            if (progress < 1) {\n                GLOBAL_DATA.game.healthProgress.getComponent('cc.ProgressBar').progress += 0.01;\n            }\n        }\n    },\n    // onCollisionEnter(other, self) {\n    //     console.log('enter')\n    // },\n    onBeginContact(contact, self, other) {\n        if (other.node.group !== 'platform' && other.node.group !== 'player') {\n            // 掉血\n            this.lostHealth += 1;\n        }\n    },\n    onEndContact(contact, self, other) {\n        if (other.node.group !== 'platform' && other.node.group !== 'player') {\n            this.lostHealth -= 1;\n        }\n    },\n\n});\n","cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        inputName: {\n            default: null,\n            type: cc.Node,\n        },\n        btnStart: {\n            default: null,\n            type: cc.Node,\n        },\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start() {\n        this.btnStart.on('touchstart', () => {\n            const name = this.inputName.getComponent('cc.EditBox').string;\n\n            // GLOBAL_DATA.connectHandler.emit('enter', {\n            //     name: name\n            // })\n            cc.director.loadScene('game');\n\n            setInterval(() => {\n                window.GLOBAL_DATA.game.spawnNewPlatform(this.spawnPlatformPosition());\n            }, 2000);\n\n        });\n    },\n\n    spawnPlatformPosition() {\n\n        const canvasStatus = {\n            width: 750,\n            height: 1334,\n        };\n        const y = -canvasStatus.height / 2;\n        const x = (Math.random() - 0.5) * canvasStatus.width;\n        return {x, y};\n    },\n\n// update (dt) {},\n});\n"],"sourceRoot":"/source/","file":"project.js"}